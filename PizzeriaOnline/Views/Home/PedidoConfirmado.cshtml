@{
    var nombreUsuarioChat = "Cliente";
    if (User?.Identity?.IsAuthenticated ?? false)
    {
        nombreUsuarioChat = User.IsInRole("Admin") ? "Admin" : "Cliente";
    }
}

@{
	ViewData["Title"] = "¡Pedido Confirmado!";
}

<div class="text-center">
	<h1 class="display-4 text-success">¡Gracias por tu pedido!</h1>
	<p class="lead">Hemos recibido tu pedido y ya lo estamos preparando.</p>
	<hr />
	<p>Tu número de confirmación es: <strong>#@ViewBag.PedidoId</strong></p>
	<div class="mt-3">
        <h4>
            Estado de tu Pedido:
            <span id="estado-pedido" class="badge bg-primary fs-5">
                <i id="icono-estado" class="bi bi-envelope me-1"></i> Recibido
            </span>
        </h4>
	</div>
	<div class="mt-4">
		<a asp-action="Index" asp-controller="Home" class="btn btn-primary">Volver al Menú</a>
	</div>
</div>

<hr />
<div class="row justify-content-center">
    <div class="col-md-8">
        <h4>Chat con la Pizzería</h4>
        <div id="chat-box" class="border p-3 mb-2" style="height: 200px; overflow-y: scroll;">
        </div>
        <div class="input-group">
            <input type="text" id="mensaje-input" class="form-control" placeholder="Escribe tu mensaje..." />
            <button id="enviar-mensaje-btn" class="btn btn-primary">Enviar</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // --- 1. CONFIGURACIÓN INICIAL ---
        const connection = new signalR.HubConnectionBuilder().withUrl("/pedidoHub").build();
        const pedidoId = "@(Model?.Id.ToString() ?? ViewBag.PedidoId?.ToString())";
        const nombreUsuarioChat = "@(User.Identity != null && User.Identity.IsAuthenticated && User.IsInRole("Admin") ? "Admin" : "Cliente")";

        const mensajeInput = document.getElementById("mensaje-input");
        const enviarMensajeBtn = document.getElementById("enviar-mensaje-btn");
        const chatBox = document.getElementById("chat-box");
        const estadoElement = document.getElementById("estado-pedido");

        // --- 2. FUNCIÓN CENTRALIZADA PARA ENVIAR MENSAJE ---
        function enviarMensaje() {
            const mensaje = mensajeInput.value;
            if (mensaje.trim() !== "") {
                connection.invoke("EnviarMensaje", pedidoId, nombreUsuarioChat, mensaje).catch(err => console.error(err.toString()));
                mensajeInput.value = "";
                mensajeInput.focus();
            }
        }

        // --- 3. LÓGICA PARA RECIBIR DATOS DEL SERVIDOR ---

        // Lógica para actualizar el estado del pedido en tiempo real
               connection.on("RecibirActualizacionEstado", function (nuevoEstado) {
            console.log("Nuevo estado recibido:", nuevoEstado);
            const estadoElement = document.getElementById("estado-pedido");

            if (estadoElement) {
                let colorBadge = "bg-secondary";
                let iconoBadge = "bi-question-circle";

                switch (nuevoEstado) {
                    case "Recibido":
                        colorBadge = "bg-primary";
                        iconoBadge = "bi-envelope";
                        break;
                    case "En preparación":
                        colorBadge = "bg-warning text-dark";
                        iconoBadge = "bi-fire";
                        break;
                    case "En camino":
                        colorBadge = "bg-info text-dark";
                        iconoBadge = "bi-truck";
                        break;
                    case "Completado":
                        colorBadge = "bg-success";
                        iconoBadge = "bi-check2-circle";
                        break;
                    case "Cancelado":
                        colorBadge = "bg-danger";
                        iconoBadge = "bi-x-circle";
                        break;

                }

                // --- INICIO DE LA CORRECCIÓN ---
                // 1. Actualizamos la clase del color en el <span> principal
                estadoElement.className = "badge fs-5 " + colorBadge;

                // 2. Reconstruimos el contenido HTML interno para incluir el nuevo ícono y el texto
                estadoElement.innerHTML = `<i class="bi ${iconoBadge} me-1"></i> ${nuevoEstado}`;
                // --- FIN DE LA CORRECCIÓN ---
            }
        });
        
        // Lógica para recibir un nuevo mensaje del chat
        connection.on("RecibirMensaje", function (usuario, mensaje) {
            const p = document.createElement("p");
            p.innerHTML = `<strong>${usuario}:</strong> ${mensaje}`;
            chatBox.appendChild(p);
            chatBox.scrollTop = chatBox.scrollHeight;
        });

        // Lógica para cargar el historial del chat al conectarse
        connection.on("CargarHistorial", function (historial) {
            chatBox.innerHTML = "";
            historial.forEach(function (mensaje) {
                const p = document.createElement("p");
                p.innerHTML = `<strong>${mensaje.autor}:</strong> ${mensaje.texto}`;
                chatBox.appendChild(p);
            });
            chatBox.scrollTop = chatBox.scrollHeight;
        });

        // --- 4. ASIGNACIÓN DE EVENTOS ---
        enviarMensajeBtn.addEventListener("click", function (event) {
            event.preventDefault();
            enviarMensaje();
        });

        mensajeInput.addEventListener("keydown", function(event) {
            if (event.key === "Enter") {
                event.preventDefault();
                enviarMensaje();
            }
        });

        // --- 5. INICIAR CONEXIÓN ---
        connection.start().then(function () {
            console.log("Conexión con SignalR establecida.");
            if (pedidoId) {
                connection.invoke("UnirseAGrupoPedido", pedidoId).catch(err => console.error(err.toString()));
            }
        }).catch(function (err) {
            return console.error(err.toString());
        });
    </script>
}