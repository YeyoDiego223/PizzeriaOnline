@using PizzeriaOnline.ViewModels
@model List<PizzeriaOnline.Models.Pedido>
@{
	ViewData["Title"] = "Panel de Administración";
}

<hi class="display-4">Pedidos Recibidos</hi>

<div class="row mb-4">

	@* Columna para Ventas Totales *@
	<div class="col-md-3">
		<div class="card text-white bg-success h-100">
			<div class="card-body">
				<h5 class="card-title">Ventas de hoy</h5>
				<p class="card-text fs-4 fw-bold">
					@(((decimal)ViewData["TotalVentasHoy"]).ToString("C"))
				</p>
			</div>
		</div>
	</div>

	@* Columna para Pedidos de Hoy *@
	<div class="col-md-3">
		<div class="card text-white bg-info h-100">
			<div class="card-body">
				<h5 class="card-title">Pedidos de Hoy</h5>
				<p class="card-text fs-4 fw-bold">
					@ViewData["PedidosHoy"]
				</p>
			</div>
		</div>
	</div>

	@* Columna para Alerta de Inventario *@
	<div class="col-md-3">	
		<div class="card text-white bg-danger h-100">
			<div class="card-body">
				<h5 class="card-title">Inventario Bajo</h5>
				@{
					var ingredientesBajos = ViewData["IngredientesBajos"] as List<Ingrediente>;
					var productosExtraBajos = ViewData["ProductosExtraBajos"] as List<ProductoExtra>;

					bool hayIngredientesBajos = ingredientesBajos != null && ingredientesBajos.Any();
					bool hayProductosBajos = productosExtraBajos != null && productosExtraBajos.Any();

					if (hayIngredientesBajos || hayProductosBajos)
					{
						<ul class="list-unstyled mb-0 small">
						@if (hayIngredientesBajos)
						{
							@foreach (var ingrediente in ingredientesBajos)
							{
								<li>- @ingrediente.Nombre (@ingrediente.CantidadEnStock @ingrediente.UnidadDeMedida)</li>
							}
						}
						@if (hayProductosBajos)
						{
							foreach (var producto in productosExtraBajos)
							{
								<li>- @producto.Nombre (Quedan: @producto.CantidadEnStock)</li>
							}
						}																									
						</ul>
					}
					else
					{
						<p class="card-text">¡Todo en orden!</p>
					}
				}
			</div>
		</div>
	</div>

	@* Columna para mostrar las Pizzas más vendidas *@
	<div class="col-md-3">
		<div class="card text-dark bg-light h-100">
			<div class="card-body">
				<h5 class="card-title">Pizzas Populares</h5>
				@{
					// Necesitamos convertir el ViewData a su tipo correcto.
					// Usamos 'dynamic' porque el objeto que creamos en el Select no tiene un nombre de clase formal.
					var pizzasPopulares = ViewData["PizzasPopulares"] as List<PizzaPopularViewModel>;
					if (pizzasPopulares != null && pizzasPopulares.Any())
					{
						<ol class="mb-0 ps-3 small">
						@foreach (var pizza in pizzasPopulares)
							{
								<li><strong>@pizza.NombrePizza</strong> (@pizza.CantidadVendida vendida(s))</li> 
							}
						</ol>
					}
					else
					{
						<p class="card-text">No hay datos</p>
					}
				}
			</div>
		</div>
	</div>
</div>

<div class="row mb-4">
	@* Columna para el formulario de búsqueda (8 de 12 columnas) *@
	<div class="col-md-12">
		<form asp-action="Index" asp-controller="Admin" method="get">
			<div class="input-group">
				<input type="text" name="terminoBusqueda" value="@ViewData["BusquedaActual"]" class="form-control" placeholder="Buscar por Nombre o ID de Pedido..." />
				<button type="submit" class="btn btn-primary">
					<i class="bi bi-search"></i> Buscar
				</button>
			</div>
		</form>
	</div>
</div>
<p class="lead">Lista de todos los pedidos realizados por los clientes.</p>
<hr />

<div class="mt-4">
	<a asp-controller="PizzasAdmin" asp-action="Index" class="btn btn-secondary">
		Gestionar Pizzas del Menú
	</a>

	<a asp-controller="Inventario" asp-action="Index" class="btn btn-info">
		Gestionar Inventario
	</a>
	<a asp-controller="ProductosExtra" asp-action="Index" class="btn btn-info">
		Gestionar Productos Extra
	</a>
	<a asp-controller="Configuracion" asp-action="Index" class="btn btn-warning">
		<i class="bi bi-gear-fill"></i> Configuración de Tienda
	</a>
</div>
@if (!Model.Any())
{
	<div class="alert alert-info">
		Aún no se han recibido pedidos
	</div>
}
else
{
	<table class="table table-bordered table-striped">
		<thead class="table-dark">
			<tr>
				<th>ID Pedido</th>
				<th>Fecha</th>
				<th>Clientes</th>
				<th>Total</th>
				<th>Estado</th>
				<th>Acciones</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var pedido in Model)
			{
					var colorBadge = "bg-secondary"; // Color por defecto
					var iconoBadge = "bi-question-circle"; // Icono por defecto
					switch (pedido.Estado)
					{
						case "Recibido":
							colorBadge = "bg-primary";
							iconoBadge = "bi-envelope"; // Un sobre
							break;
						case "En preparación":
							colorBadge = "bg-warning text-dark";
							iconoBadge = "bi-fire"; // Fuego
							break;
						case "En camino":
							colorBadge = "bg-info text-dark";
							iconoBadge = "bi-truck"; // Un camión
							break;
						case "Completado":
							colorBadge = "bg-success";
							iconoBadge = "bi-check2-circle"; // Un check
							break;
						case "Cancelado":
							colorBadge = "bg-danger";
							iconoBadge = "bi-x-circle"; // Una X
							break;
					}				
				<tr>
					<td>@pedido.Id</td>
					<td>@pedido.FechaPedido.ToString("g")</td>
					<td>@pedido.NombreCliente</td>
					<td>@pedido.TotalPedido.ToString("C")</td>
					<td><span class="badge @colorBadge fs-6">@pedido.Estado</span></td>
					<td>
						<a asp-action="DetallePedido" asp-route-id="@pedido.Id" class="btn btn-info btn-sm">Ver Detalles</a>
					</td>
				</tr>
			}
		</tbody>
	</table>
}

